{"version":3,"sources":["components/UpdateDialog.jsx","components/DeleteDialog.jsx","components/TodoList.jsx","components/App.jsx","actions/AppActions.jsx","containers/App.jsx","reducers/reducer.jsx","index.js"],"names":["UpdateDialog","props","state","open","text","item","value","bind","close","change","Update","this","setState","event","onUpdate","id","Modal","trigger","Button","color","onClick","disabled","condition","size","Header","icon","content","Content","Input","fluid","onChange","Actions","Icon","name","Component","DeleteDialog","Delete","onDelete","basic","inverted","TodoList","Check","task","target","handleDelete","handleCheck","handleUpdate","Table","Body","items","map","Row","key","Cell","width","textAlign","Checkbox","checked","toString","as","className","App","handleChange","handleClick","makeItem","UpdateState","handleAddItem","Date","todo","concat","currentValue","index","splice","handleUpdateItem","Menu","attached","Item","Container","Grid","container","Column","Divider","horizontal","columns","placeholder","primary","React","addItem","type","updateItem","connect","dispatch","initialState","reducer","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0992cdf7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \nimport {\n    Button,\n    Header,\n    Modal,\n    Icon,\n    Input,\n} from 'semantic-ui-react'\n\nclass UpdateDialog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // openの状態変化に応じでモーダルの表示、非表示\n            open: false,\n            text: this.props.item.value,\n        }\n        this.open = this.open.bind(this)\n        this.close = this.close.bind(this)\n        this.change = this.change.bind(this)\n        this.Update = this.Update.bind(this)\n    }\n    open() {\n        this.setState({ open: true })\n    }\n    close() {\n        this.setState({ open: false })\n    }\n    change(event, item) {\n        this.setState({\n            text: item.value,\n        })\n    }\n    Update() {\n        this.props.onUpdate(this.props.item.id, this.state.text)\n        this.close()\n    }\n    render() {\n        return (\n            <Modal\n                trigger={\n                    // ボタンを配置\n                    <Button color=\"green\" onClick={this.open} disabled={this.props.item.condition} >更新</Button>\n                }\n                size=\"small\"\n                //デフォルト：false\n                open={this.state.open}\n            >\n                <Header icon=\"tasks\" content=\"タスク更新\" />\n                <Modal.Content>\n                    <Input fluid value={this.state.text} onChange={this.change} />\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.close} ><Icon name=\"remove\" /> キャンセル</Button>\n                    <Button color=\"green\" onClick={this.Update} ><Icon name=\"checkmark\" />更新</Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n\n// propの型を宣言\nUpdateDialog.propTypes = {\n    item: PropTypes.object,\n    onUpdate: PropTypes.func,\n}\n\nexport default UpdateDialog","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \nimport {\n    Button,\n    Header,\n    Modal,\n    Icon,\n} from 'semantic-ui-react'\n\nclass DeleteDialog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // openの状態変化に応じでモーダルの表示、非表示\n            open: false,\n        }\n        this.open = this.open.bind(this)\n        this.close = this.close.bind(this)\n        this.Delete = this.Delete.bind(this)\n    }\n    open() {\n        this.setState({ open: true })\n    }\n    close() {\n        this.setState({ open: false })\n    }\n    Delete() {\n        this.props.onDelete(null, this.props.item)\n    }\n    render() {\n        return (\n            <Modal\n                trigger={\n                    // ボタンを配置\n                    <Button color=\"red\" onClick={this.open} >削除</Button>\n                }\n                basic\n                size=\"small\"\n                open={this.state.open}\n            >\n                <Header icon=\"tasks\" content=\"タスク削除\" />\n                <Modal.Content>\n                    <p>「{this.props.item.value}」タスクを削除してもよろしいですか？</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button basic inverted onClick={this.close}><Icon name=\"remove\" />いいえ</Button>\n                    <Button color=\"red\" inverted onClick={this.Delete} ><Icon name=\"checkmark\" />はい</Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n\n// propの型を宣言\nDeleteDialog.propTypes = {\n    item: PropTypes.object,\n    onDelete: PropTypes.func,\n}\n\nexport default DeleteDialog","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \nimport {\n    Table,\n    Header,\n    Checkbox,\n} from 'semantic-ui-react'\n\n// Modal\nimport UpdateDialog from './UpdateDialog'\nimport DeleteDialog from './DeleteDialog'\n\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props)\n        this.Delete = this.Delete.bind(this)\n        this.Update = this.Update.bind(this)\n        this.Check = this.Check.bind(this)\n    }\n\n    /**\n     * 削除ボタンを押下された際のイベントハンドラー\n     * 呼び出し元のメソッドを利用する(props)\n     * ここではsrc/components/App.jsx\n     * ボタンの実態はコンポーネント（src/components/DeleteDialog.jsx）に存在する\n     * @param {*} event\n     * @param {object} item \n     */\n    Delete(event, item) {\n        const task = item.target ? item.target : item.id\n        //呼び出し元のメソッドを利用\n        this.props.handleDelete(task)\n    }\n\n    /**\n     * チェックボックスを押下された際のイベントハンドラー\n     * 呼び出し元のメソッドを利用する(props)\n     * ここではsrc/components/App.jsx\n     * @param {*} event\n     * @param {object} item\n     */\n    Check(event, item) {\n        let id = item.value\n        //呼び出し元のメソッドを利用\n        this.props.handleCheck(id)\n    }\n\n    /**\n     * 更新ボタンを押下された際のイベントハンドラー\n     * 呼び出し元のメソッドを利用する(props)\n     * ここではsrc/components/App.jsx\n     * ボタンの実態はコンポーネント（src/components/UpdateDialog.jsx）に存在する\n     * @param {*} event\n     * @param {object} item\n     */\n    Update(target, change) {\n        //呼び出し元のメソッドを利用\n        this.props.handleUpdate(target, change)\n    }\n    render() {\n        return (\n            <Table basic=\"very\" >\n                <Table.Body>\n                    {this.props.items.map((item) => {\n                        return (\n                            <Table.Row key={item.id} >\n                                <Table.Cell width={3} textAlign=\"right\" >\n                                    <Checkbox checked={item.condition} value={(item.id).toString()} onChange={this.Check} />\n                                </Table.Cell>\n                                <Table.Cell width={6} textAlign=\"center\" >\n                                    <Header as=\"h2\" disabled={item.condition} className={item.condition ? 'lineThrough' : ''} >\n                                        {item.value}\n                                    </Header>\n                                </Table.Cell>\n                                <Table.Cell width={3} textAlign=\"left\" >\n                                    <UpdateDialog item={item} onUpdate={this.Update} />\n                                    <DeleteDialog item={item} onDelete={this.Delete} />\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    })}\n                </Table.Body>\n            </Table>\n        )\n    }\n}\n\n// propの型を宣言\nTodoList.propTypes = {\n    items: PropTypes.array,\n    handleDelete: PropTypes.func,\n    handleCheck: PropTypes.func,\n    handleUpdate: PropTypes.func,\n}\n\nexport default TodoList","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport { \n    Container,\n    Button,\n    Grid,\n    Divider,\n    Input,\n    Menu,\n} from \"semantic-ui-react\";\n\nimport TodoList from './TodoList';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // タスクの初期内容\n            text: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.makeItem = this.makeItem.bind(this)\n        this.handleDelete = this.handleDelete.bind(this)\n        this.handleUpdate = this.handleUpdate.bind(this)\n        this.handleCheck = this.handleCheck.bind(this)\n        this.UpdateState = this.UpdateState.bind(this)\n    }\n\n    /**\n     * 操作：入力項目を変更した際のイベントハンドラー\n     * 動作：テキスト内容をステートに保持する\n     * @param {object} item \n     */\n    handleChange(event, item) {\n        this.setState({\n            text: item.value,\n        })\n    }\n\n    /**\n     * 操作：「タスク追加」ボタンを押下後（クリック）後のイベントハンドラー\n     * 動作：入力されている内容（ステートで保持しているデータ）を上位（プロップス）より渡されている関数に引き継ぐ\n     * ※その前にタスク作成メソッドを呼び出してオブジェクトを作成している\n     */\n    handleClick() {\n        if (!(this.state.text)) {\n            return\n        }\n        this.props.handleAddItem(this.makeItem(this.state.text))\n        this.setState({\n            text: '',\n        })\n    }\n\n    /**\n     * TODOのタスクを生成する\n     * @param {string} text 入力内容（ステートより）\n     * @returns {object}\n     */\n    makeItem(text) {\n        const item = {\n            value: text,\n            id: new Date(),\n            condition: false,\n        }\n        return item\n    }\n\n    /**\n     * 更新モーダルより変更のあったアイテムに対して、\n     * ステートの更新をかける（ための準備）\n     * @param {string} id \n     * @param {string} text \n     */\n    handleUpdate(id, text) {\n        //タスクを別の配列として複製\n        const todo = (this.props.items).concat()\n        todo.map((currentValue, index) => {\n            if (currentValue.id === id) {\n                todo[index].value = text\n            }\n            return currentValue.id\n        })\n        this.UpdateState(todo)\n    }\n\n    /**\n     * TODOのタスクから対象のIDを削除する\n     * src/components/DeleteDialog.jsxよりIDが上がってきます。\n     * @param {string} id \n     */\n    handleDelete(id) {\n        //タスクを別の配列として複製\n        const todo = (this.props.items).concat()\n        todo.map((currentValue, index) => {\n            if (currentValue.id === id) { todo.splice(index, 1) }\n            return currentValue.id\n        })\n        this.UpdateState(todo)\n    }\n    \n    /**\n     * TODOのタスクの状態を変化させる\n     * 完了 <=> 未完了\n     * @param {string} id\n     */\n    handleCheck(id) {\n        const todo = (this.props.items).concat()\n        todo.map((currentValue, index) => {\n            if ((currentValue.id).toString() === id) {\n                todo[index].condition = !(todo[index].condition)\n            }\n            return currentValue.id\n        })\n        this.UpdateState(todo)\n    }\n\n    // ステート更新\n    /**\n     * 上位のコンポーネントからプロップされたメソッドを使用する。\n     * (渡されたメソッドはアクションのため、ディスパッチャーが呼び出され、ステートが変わる)\n     * @param {*} value \n     */\n    UpdateState(value) {\n        this.props.handleUpdateItem(value)\n    }\n    \n    /**\n     * 描画ß\n     */\n    render() {\n        return (\n            <div>\n                <Menu attached>\n                    <Menu.Item as=\"h3\">ToDo</Menu.Item>\n                </Menu>\n                <Container>\n                    <Grid container>\n                        <Grid.Row>\n                            <Grid.Column>{null}</Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Divider horizontal>追加</Divider>\n                            <Container textAlign=\"center\">\n                                <Grid columns=\"equal\">\n                                    <Grid.Column> {null} </Grid.Column>\n                                    <Grid.Column width={8}>\n                                        <Input fluid placeholder=\"タスクを入力\" onChange={this.handleChange} value={this.state.text} />\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Button primary onClick={this.handleClick}>タスク追加</Button>\n                                    </Grid.Column>\n                                </Grid>\n                            </Container>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Divider horizontal>一覧</Divider>\n                            <Container textAlign=\"center\">\n                                <TodoList\n                                    items={this.props.items}\n                                    handleDelete={this.handleDelete}\n                                    handleCheck={this.handleCheck}\n                                    handleUpdate={this.handleUpdate}\n                                />\n                            </Container>\n                        </Grid.Row>\n                    </Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nApp.propTypes = {\n    items: PropTypes.array,\n    handleTodoAdd: PropTypes.func,\n    handleUpdAdd: PropTypes.func,\n}\nexport default App;\n","const Actions = {\n    addItem(item) {\n        return {\n            type : 'ADD',\n            item\n        }\n    },\n    // 新規追加以外の更新、削除はすべてUPDATEで完結\n    updateItem(item) {\n        return {\n            type : 'UPDATE',\n            item\n        }\n    },\n}\n\nexport default Actions;","import { connect } from \"react-redux\";\nimport App from \"./../components/App\";\nimport Actions from \"./../actions/AppActions\";\n\n// Container(コンテナ)\n// Storeが持つStateをReactのプロパティとしてViewと結びつける役割を持つ。\nfunction mapStateToProps(state) {\n    return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        handleAddItem(item) {\n            dispatch(Actions.addItem(item));\n        },\n        handleUpdateItem(item) {\n            dispatch(Actions.updateItem(item));\n        }\n    }\n}\n\n// connectを利用して、mapStateToPropsが取ってきたStateの値をApp（コンポーネント）で利用できるように繋げて(connect)います。\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// containerに関しては、ほとんどの場合がこれだけのようです。\n","// 初期State\nconst initialState = {\n    items : [],\n    text : \"\",\n}\n\n// Reducer\n/**\n * Actionを受け取り、それに従って書き換えるStateの中身を作る。\n * 上位（createStore(reducer)）で呼び出した箇所で管理される。\n * コンテナーでディスパッチしておき、\n * アクションが実行された際にReducer(レジューサ)が受け取り書き換えるStateの中身を作る。\n * ここではsrc/index.jsの中でcreateStoreを呼び出し、src/containers/App.jsxでディスパッチしている。\n * ディスパッチではsrc/actions/AppActions.jsxのアクションを結び付けている。\n * Viewのコンポーネント（src/components/App.jsx）のhandleClickメソッドなどで受け取ったプロップによって\n * 該当メソッドを呼び出している。\n * \n */\n// デフォルト指定\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD' : {\n            return {\n                items: state.items.concat(action.item)\n            };\n        }\n        case 'UPDATE' : {\n            return {\n                items : action.item\n            };\n        }\n        default : {\n            return state;\n        }\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './containers/App';\nimport reducer from './reducers/reducer';\n\n// import * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}